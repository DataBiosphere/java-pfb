plugins {
    id 'com.srcclr.gradle'
    id 'maven-publish'
    id 'bio.terra.pfb.java-library-conventions'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
    id 'me.champeau.jmh' version '0.7.3'
    id 'com.google.cloud.artifactregistry.gradle-plugin' version '2.1.5'
}

repositories {
    maven {
        // Terra proxy for maven central
        url 'https://us-central1-maven.pkg.dev/dsp-artifact-registry/maven-central/'
    }
    mavenCentral()
    maven {
        url 'https://us-central1-maven.pkg.dev/dsp-artifact-registry/libs-release/'
    }
}

dependencies {
    api "org.apache.avro:avro:1.12.0"
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    testImplementation 'org.json:json:20250517'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'
}

sourceSets.main.java.srcDirs += ["${buildDir}/generated-src"]
spotless {
    java{
        // Specifically calling out the "build/generated-src" directory
        // to avoid spotless errors on avro generated code in GHA
        // ${buildDir}/** doesn't work in GHA
        targetExclude "${buildDir}/**", "build/generated-src/**"
    }
}

generateAvroJava {
    source("library/src/main/avro")
    outputDir = file("build/generated-src")
}
compileJava.dependsOn generateAvroJava

apply from: 'generators.gradle'
apply from: "publishing.gradle"

srcclr {
    scope = "runtimeClasspath"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

jmh {
    iterations = 2 // Number of measurement iterations to do.
    fork = 2 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    operationsPerInvocation = 3 // Operations per invocation.
    warmup = '1s' // Time to spend at each warmup iteration.
    warmupBatchSize = 10 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 1 // Number of warmup iterations to do.
    resultFormat = 'JSON'
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.json") // results file
}
